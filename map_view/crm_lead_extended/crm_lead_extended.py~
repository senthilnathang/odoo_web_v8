# -*- coding: utf-8 -*-
##############################################################################
#
#    This module uses OpenERP, Open Source Management Solution Framework.
#    Copyright (C) 2014-Today BrowseInfo (<http://www.browseinfo.in>)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>
#
##############################################################################
import logging
import time
from datetime import datetime

from openerp import tools
from openerp.osv import fields, osv
from openerp.tools import float_is_zero
from openerp.tools.translate import _
from openerp import tools, api, models
from openerp.addons.base.res.res_partner import format_address

import openerp.addons.decimal_precision as dp
import openerp.addons.product.product

class res_partner(osv.osv):
    _inherit = 'res.partner'
    
    def _opportunity_meeting_phonecall_lead_count(self, cr, uid, ids, field_name, arg, context=None):
        res = dict(map(lambda x: (x,{'opportunity_count': 0, 'meeting_count': 0}), ids))
        # the user may not have access rights for opportunities or meetings
        try:
            for partner in self.browse(cr, uid, ids, context):
                if partner.is_company:
                    operator = 'child_of'
                else:
                    operator = '='
                opp_ids = self.pool['crm.lead'].search(cr, uid, [('partner_id', operator, partner.id), ('type', '=', 'opportunity'), ('probability', '<', '100')], context=context)
                
                lead_ids = self.pool['crm.lead'].search(cr, uid, [('partner_id', operator, partner.id), ('type', '=', 'lead'), ('probability', '<', '100')], context=context)
                
                res[partner.id] = {
                    'opportunity_count': len(opp_ids),
                    'meeting_count': len(partner.meeting_ids),
                    'lead_count' : len(lead_ids),
                }
        except:
            pass
        for partner in self.browse(cr, uid, ids, context):
            res[partner.id]['phonecall_count'] = len(partner.phonecall_ids)
        return res
    
    
    _columns = {
        'cust_last_name' : fields.char("Last Name", required=True),
        'first_name': fields.char('First Name'),
#        'second_first_name': fields.char('Secondary First Name'),
#        'relation_primary': fields.char('Relationship to Primary?'),    
        'last_name': fields.char('Last Name'),
        'partner_email': fields.char('Email'),
        'partner_function': fields.char('Job Title'),
        'personal_no' : fields.char('Personal No'),
        'marital_status': fields.selection(
                [('single', 'Single'), ('engaged', 'Engaged'), ('married', 'Married'), ('partners', 'Partners'), ('couple', 'Couple'), ('widower', 'Widower'), ('divorced', 'Divorced')],
                string='Marital Status', copy=False),
        'work_phone': fields.char('Work Phone'),
        'cell_phone': fields.char('Cell Phone'),
        'home_phone': fields.char('Home Phone'),
        'cust_home_phone_2': fields.char('Home Phone (2)'),
        'cust_mobile_phone_2': fields.char('Mobile Phone (2)'),
        'cust_work_phone': fields.char('Work Phone'),
        'cust_email_2': fields.char('Email (2)'),
        'cust_place_emp': fields.char('Place of Employment'),
        'children' : fields.boolean('Children'),
        'child_1': fields.char('Child 1'),
        'child_2': fields.char('Child 2'),
        'own_rent': fields.selection(
                [('own', 'Own'), ('rent', 'Rent')],
                string='Own or Rent?', copy=False),
        'partner_place_emp': fields.char('Place of Employment'),
        'partner_cell_phone': fields.char('Cell Phone'),
        'partner_home_phone': fields.char('Home Phone'),
        'partner_work_phone': fields.char('Work Phone'),
        'address_same_yes': fields.boolean('Yes'),
        'address_same_no': fields.boolean('No'),
        'street_2': fields.char('Street'),
        'street2_2': fields.char('Street2'),
        'city_2': fields.char('City'),
        'country_id_2': fields.many2one('res.country', 'Country', ondelete='restrict'),
        'state_id_2': fields.many2one("res.country.state", 'State', ondelete='restrict'),
        'zip_2': fields.char('Zip', size=24, change_default=True),
        'cust_street_2': fields.char('Street'),
        'cust_street2_2': fields.char('Street2'),
        'cust_city_2': fields.char('City'),
        'cust_country_id_2': fields.many2one('res.country', 'Country', ondelete='restrict'),
        'cust_state_id_2': fields.many2one("res.country.state", 'State', ondelete='restrict'),
        'cust_zip_2': fields.char('Zip', size=24, change_default=True),
        
        'appointment_type': fields.selection(
                [('owner', 'Owner')],
                'Appointment Type', copy=False),
        'referred_by': fields.many2one('res.partner', 'Referred By'),
        'lead_type': fields.selection(
                [('pl', 'Personal'), ('gl', 'Green Lights'), ('is', 'Instant')],
                'Lead type', copy=False),
        'dealer': fields.many2one('res.dealer', 'Dealer'),
        'sponsor': fields.many2one('res.partner', 'Sponsor'),
        'event': fields.char('Event'),
        'allergies_yes': fields.boolean('Yes'),
        'allergies_no': fields.boolean('No'),
        'pets_yes': fields.boolean('Yes'),
        'pets_no': fields.boolean('No'),
        'comment_other': fields.text('Notes'),
        'company_owner': fields.boolean('Company Owner?'),
        'fiscal_id': fields.char('Fiscal ID'),
        'registry': fields.char('Registration Number'),
        
        'cust_company_name': fields.many2one('res.company', 'Company'),
        'company_id_1': fields.many2one('res.company', 'Company'),
        'company_id_2': fields.many2one('res.company', 'Company'),
        'comp1_title': fields.many2one('res.partner.title', 'Title'),
        'comp2_title': fields.many2one('res.partner.title', 'Title'),
        'company_acc_number': fields.char('Company BANK ACCOUNT'),
        'company_act_1': fields.text('Company Activity Domain'),
        'company_act_2': fields.text('Company Activity Domain'),
        'company_vat': fields.char('VAT NUMBER'),
        'comp1_fiscal_id': fields.char('Fiscal ID'),
        'comp1_registry': fields.char('Registration Number'),
        'comp2_fiscal_id': fields.char('Fiscal ID'),
        'comp2_registry': fields.char('Registration Number'),
        'comp1_street': fields.char('Street'),
        'comp1_street2': fields.char('Street2'),
        'comp1_country_id': fields.many2one('res.country', 'Country', ondelete='restrict'),
        'comp1_state_id': fields.many2one("res.country.state", 'State', ondelete='restrict'),
        'comp1_zip': fields.char('ZIP', size=24, change_default=True),
        'comp1_city': fields.char('CITY'),

        'company_id_3': fields.many2one('res.company', 'Company'),
        'comp3_title': fields.many2one('res.partner.title', 'Title'),
        'company_act_3': fields.text('Company Activity Domain'),
        'comp3_fiscal_id': fields.char('Fiscal ID'),
        'comp3_registry': fields.char('Registration Number'),
        'comp3_street': fields.char('Street'),
        'comp3_street2': fields.char('Street2'),
        'comp3_country_id': fields.many2one('res.country', 'Country', ondelete='restrict'),
        'comp3_state_id': fields.many2one("res.country.state", 'State', ondelete='restrict'),
        'comp3_zip': fields.char('ZIP', size=24, change_default=True),
        'comp3_city': fields.char('CITY'),
        
        'company_id_4': fields.many2one('res.company', 'Company'),
        'comp4_title': fields.many2one('res.partner.title', 'Title'),
        'company_act_4': fields.text('Company Activity Domain'),
        'comp4_fiscal_id': fields.char('Fiscal ID'),
        'comp4_registry': fields.char('Registration Number'),
        'comp4_street': fields.char('Street'),
        'comp4_street2': fields.char('Street2'),
        'comp4_country_id': fields.many2one('res.country', 'Country', ondelete='restrict'),
        'comp4_state_id': fields.many2one("res.country.state", 'State', ondelete='restrict'),
        'comp4_zip': fields.char('ZIP', size=24, change_default=True),
        'comp4_city': fields.char('CITY'),
        
        'comp2_street': fields.char('Street'),
        'comp2_street2': fields.char('Street2'),
        'comp2_country_id': fields.many2one('res.country', 'Country', ondelete='restrict'),
        'comp2_state_id': fields.many2one("res.country.state", 'State', ondelete='restrict'),
        'comp2_zip': fields.char('ZIP', size=24, change_default=True),
        'comp2_city': fields.char('CITY'),
        'meeting_count': fields.function(_opportunity_meeting_phonecall_lead_count, string="# Appointments", type='integer', multi='meeting_count'),
        'partner_leads' : fields.one2many('crm.lead', 'partner_id', string="Leads", readonly="True", ),
        'lead_count': fields.function(_opportunity_meeting_phonecall_lead_count, string="# Leads", type='integer', multi='meeting_count'),
        'partner_campaigns' : fields.one2many('crm.tracking.campaign', 'partner_id', string="Campaigns", readonly="True"),
#        'partner_sale_info' : fields.one2many('sale.order', 'partner_id', string="Sales Info", readonly="True"),
        'customer_acc_inv' : fields.one2many('account.invoice', 'partner_id', string="Customer Invoice Info", readonly="True", domain=[('type', '=', 'out_invoice')]),
#        'supplier_acc_inv' : fields.one2many('account.invoice', 'partner_id', string="Supplier Invoice Info", readonly="True", domain=[('type', '=', 'in_invoice')]),
        'customer_payment' : fields.one2many('account.voucher', 'partner_id', string="Customer Payment Info", readonly="True", domain=[('type', '=', 'receipt')]),
#        'supplier__payment' : fields.one2many('account.voucher', 'partner_id', string="Supplier Payment Info", readonly="True", domain=[('type', '=', 'payment')]), 
        'call_history' : fields.one2many('crm.phonecall', 'partner_id', string="Logged Calls", readonly="True"),
        'appointment_ids' : fields.one2many('calendar.event', 'partner_id', string="Appointments", readonly="True"),
        'gift_ids': fields.one2many('gift.line', 'partner_id', 'Gifts', copy=False),
        'prod_warr_ids': fields.one2many('product.warranty', 'partner_warr_id', 'Warranty Revision', copy=False),
        'more_comp' : fields.boolean('More Companies?'),
        'prod_service_ids' : fields.one2many('product.warranty', 'partner_service_id', 'Service Revision', copy=False),
        
        'appt_type' : fields.many2one('appt.type', 'Appt Type'),
        'date_set' : fields.date('Date Set'),
        'date_sold' : fields.date('Date Sold'),
        'serial_no' : fields.many2one('stock.production.lot', 'Serial #'),
        'dealer_id': fields.many2one('res.dealer', 'Dealer'),
        'dealer_position' : fields.many2one('dealer.position', 'Position'),
        'advance_date' : fields.date('Advance Date'),
        'sale_amt' : fields.char('Sale'),
        'tax_rate' : fields.char('Tax Rate'),
        'total_tax' : fields.char('Total Tax'),
        'total_sale' : fields.char('Total Sale'),
        'sponsor_id_2': fields.many2one('res.partner', 'Sponsor'),
        'lead_dealer_id': fields.many2one('res.dealer', 'Lead Dealer'),
        'assistant_id' : fields.many2one('res.users', 'Assistant'),
        'ride_along_id' : fields.many2one('res.users', 'Ride-Along'),
        'set_by' : fields.many2one('res.users', 'Set By'),
        'prob_with_sale' : fields.many2one('sale.problem', 'Problem With Sale'),
        'sale_comment' : fields.text('Sale Comments'),
        
        'pay_type': fields.many2one('account.payment.term', 'Payment Type'),
        'option' : fields.char('Options'),
        'down_payment' : fields.char('Down Payment'),
        'down_type': fields.many2one('payment.type', 'Down Type'),
        'amount_financed' : fields.char('Amount Financed'),
        'filling_fee' : fields.char('Filling Fee'),
        'reserve_amt' : fields.char('Reserve Amount'),
        'discount_amt' : fields.char('Discount Amount'),
        'sac_disc' : fields.char('S.A.C Discount'),
        'balance_due' : fields.char('Balance Due'),
        'net_sale' : fields.char('Net Sale'),
        'comment_warranty' : fields.text('Notes'),
        'comment_service' : fields.text('Notes'),
    }

    def onchange_add(self, cr, uid, ids, address_same_yes, context=None):
        result = {}
        partner_obj = self.browse(cr, uid, ids)
        if address_same_yes is True:
            result['value'] = {'street_2': partner_obj.street, 'street2_2': partner_obj.street2, 'city_2' : partner_obj.city, 'country_id_2' : partner_obj.country_id, 'state_id_2' : partner_obj.state_id, 'zip_2' : partner_obj.zip}
        return result

    def onchange_comp1(self, cr, uid, ids, company, context=None):
        result = {}
        company_obj = self.pool.get('res.company').browse(cr, uid, company)
        result['value'] = {'comp1_street': company_obj.street, 'comp1_street2': company_obj.street2,  'comp1_country_id': company_obj.country_id, 'comp1_state_id': company_obj.state_id, 'comp1_zip': company_obj.zip, 'comp1_city' : company_obj.city, 'comp1_vat' : company_obj.vat, 'comp1_registry' : company_obj.company_registry, 'company_id_1' : company}
        return result

    def onchange_comp2(self, cr, uid, ids, company, context=None):
        result = {}
        company_obj = self.pool.get('res.company').browse(cr, uid, company)
        result['value'] = {'comp2_street': company_obj.street, 'comp2_street2': company_obj.street2,  'comp2_country_id': company_obj.country_id, 'comp2_state_id': company_obj.state_id, 'comp2_zip': company_obj.zip, 'comp2_city' : company_obj.city, 'comp2_vat' : company_obj.vat, 'comp2_registry' : company_obj.company_registry}
        return result

class res_dealer(osv.Model):
    _name = 'res.dealer'

    @api.multi
    def _get_image(self, name, args):
        return dict((p.id, tools.image_get_resized_images(p.image)) for p in self)

    @api.one
    def _set_image(self, name, value, args):
        return self.write({'image': tools.image_resize_image_big(value)})

    def onchange_add(self, cr, uid, ids, address_same_yes, context=None):
        result = {}
        partner_obj = self.browse(cr, uid, ids)
        if address_same_yes is True:
            result['value'] = {'street_2': partner_obj.street, 'street2_2': partner_obj.street2, 'city_2' : partner_obj.city, 'country_id_2' : partner_obj.country_id, 'state_id_2' : partner_obj.state_id, 'zip_2' : partner_obj.zip}
        return result

    def onchange_comp2(self, cr, uid, ids, company, context=None):
        result = {}
        company_obj = self.pool.get('res.company').browse(cr, uid, company)
        result['value'] = {'comp2_street': company_obj.street, 'comp2_street2': company_obj.street2,  'comp2_country_id': company_obj.country_id, 'comp2_state_id': company_obj.state_id, 'comp2_zip': company_obj.zip, 'comp2_city' : company_obj.city, 'comp2_vat' : company_obj.vat, 'comp2_registry' : company_obj.company_registry}
        return result

    def onchange_comp1(self, cr, uid, ids, company, context=None):
        result = {}
        company_obj = self.pool.get('res.company').browse(cr, uid, company)
        result['value'] = {'comp1_street': company_obj.street, 'comp1_street2': company_obj.street2,  'comp1_country_id': company_obj.country_id, 'comp1_state_id': company_obj.state_id, 'comp1_zip': company_obj.zip, 'comp1_city' : company_obj.city, 'comp1_vat' : company_obj.vat, 'comp1_registry' : company_obj.company_registry, 'company_id_1' : company}
        return result

    _columns = {
        'name': fields.char('Name', required="True"),
        'last_name': fields.char('Last Name', required="True"),
        'fname': fields.char('Name'),
        'lname': fields.char('Last Name'),
        'dealer_name': fields.char('Dealer Name'),
        'personal_no' : fields.char('Personal No'),
        'marital_status': fields.selection(
                [('single', 'Single'), ('engaged', 'Engaged'), ('married', 'Married'), ('partners', 'Partners'), ('couple', 'Couple'), ('widower', 'Widower'), ('divorced', 'Divorced')],
                string='Marital Status', copy=False),
        'spouse': fields.char('Spouse'),
        'code': fields.char('Code'),
        'home_phone': fields.char('Home Phone'),
        'home_phone2': fields.char('Home Phone (2)'),
        'work_phone': fields.char('Work Phone'),
        'work_phone2': fields.char('Work Phone (2)'),
        'address': fields.char('Address1'),
        'street': fields.char('Street'),
        'street2': fields.char('Street2'),
        'city': fields.char('City'),
        'country_id': fields.many2one('res.country', 'Country', ondelete='restrict'),
        'state_id': fields.many2one("res.country.state", 'State', ondelete='restrict'),
        'zip': fields.char('Zip', size=24, change_default=True),
        'company_owners': fields.boolean('Company Owner?'),
        'cust_company_name': fields.many2one('res.company', 'Company'),
        'partner_name': fields.char('Partner Name'),
        'section_id': fields.many2one('crm.case.section', 'Sales Team'),
        'manager_name': fields.many2one('res.users', 'Manager Name'),
        'manager': fields.many2one('res.users', 'Manager'),
        'organization': fields.char('Organization'),
        'partner_company_name': fields.many2one('res.company', 'Company'),
        'start_date': fields.date('Start Date'),
        'graduation_date': fields.date('Graduation Date'),
        'elig_for_override': fields.date('Eligible For Overrides'),
        'sponsored_by': fields.many2one('res.partner', 'Sponsored By'),
        'comp_title': fields.many2one('res.partner.title', 'Title'),
        'position': fields.many2one('dealer.position', 'Position', copy=False),
        'full_time': fields.boolean('Full Time'),
        'part_time': fields.boolean('Part Time'),
        'branch': fields.char('Branch'),
        'comment': fields.text('Comment'),
        'comp2_fiscal_id': fields.char('Fiscal ID'),
        'comp2_country_id': fields.many2one('res.country', 'Country', ondelete='restrict'),
        'organization': fields.char('Organization'),
        'lead_type': fields.selection(
                [('pl', 'Personal'), ('gl', 'Green Lights'), ('is', 'Instant')],
                'Lead type', copy=False),
        'company_owner': fields.boolean('Company Owner?'),
        'company_name': fields.many2one('res.company', 'Company'),
        'responsible_user_id': fields.many2one('res.users', 'Responsible As Manager For'),
        'image': fields.binary("Image",
            help="This field holds the image used as avatar for this contact, limited to 1024x1024px"),
        'image_medium': fields.function(_get_image, fnct_inv=_set_image,
            string="Medium-sized image", type="binary", multi="_get_image",
            store={
                'res.dealer': (lambda self, cr, uid, ids, c={}: ids, ['image'], 10),
            },
            help="Medium-sized image of this contact. It is automatically "\
                 "resized as a 128x128px image, with aspect ratio preserved. "\
                 "Use this field in form views or some kanban views."),
        'allergies_yes': fields.boolean('Yes'),
        'allergies_no': fields.boolean('No'),
        'pets_yes': fields.boolean('Yes'),
        'pets_no': fields.boolean('No'),
        'comment_other': fields.text('Notes'),
        'partner_cell_phone': fields.char('Cell Phone'),
        'address_same_yes': fields.boolean('Yes'),
        'address_same_no': fields.boolean('No'),
        'work_as_team': fields.boolean('Working as TEAM?'),
        'team_name': fields.many2one('crm.case.section', 'Team Name'),
        'children': fields.boolean('Children(s)'),
        'child_1': fields.char('Child 1'),
        'child_2': fields.char('Child 2'),
        'dealer': fields.many2one('res.dealer', 'Dealer'),
        'sponsor': fields.many2one('res.partner', 'Sponsor'),
        'partner_home_phone': fields.char('Home Phone'),
        'partner_work_phone': fields.char('Work Phone'),
        'event': fields.char('Event'),
        'partner_email': fields.char('Email'),
        'street2_2': fields.char('Street2'),
        'street_2': fields.char('Street'),
        'country_id_2': fields.many2one('res.country', 'Country', ondelete='restrict'),
        'referred_by': fields.many2one('res.partner', 'Referred By'),
        'city_2': fields.char('City'),
        'zip_2': fields.char('Zip', size=24, change_default=True),
        'company_owner': fields.boolean('Company Owner?'),
        'cust_company_name': fields.many2one('res.company', 'Company'),
        'company_id_1': fields.many2one('res.company', 'Company'),
        'company_id_2': fields.many2one('res.company', 'Company'),
        'comp1_title': fields.many2one('res.partner.title', 'Title'),
        'comp2_title': fields.many2one('res.partner.title', 'Title'),
        'company_acc_number': fields.char('Company BANK ACCOUNT'),
        'company_act_1': fields.text('Company Activity Domain'),
        'company_act_2': fields.text('Company Activity Domain'),
        'company_vat': fields.char('VAT NUMBER'),
        'comp1_fiscal_id': fields.char('Fiscal ID'),
        'comp1_registry': fields.char('Registration Number'),
        'comp2_fiscal_id': fields.char('Fiscal ID'),
        'comp2_registry': fields.char('Registration Number'),
        'comp1_street': fields.char('Street'),
        'comp1_street2': fields.char('Street2'),
        'comp1_country_id': fields.many2one('res.country', 'Country', ondelete='restrict'),
        'comp1_state_id': fields.many2one("res.country.state", 'State', ondelete='restrict'),
        'comp1_zip': fields.char('ZIP', size=24, change_default=True),
        'comp1_city': fields.char('CITY'),
        'state_id_2': fields.many2one("res.country.state", 'State', ondelete='restrict'),
        'comp2_street': fields.char('Street'),
        'comp2_street2': fields.char('Street2'),
        'comp2_country_id': fields.many2one('res.country', 'Country', ondelete='restrict'),
        'comp2_state_id': fields.many2one("res.country.state", 'State', ondelete='restrict'),
        'comp2_zip': fields.char('ZIP', size=24, change_default=True),
        'comp2_city': fields.char('CITY'),

        'more_comp' : fields.boolean('More Companies?'),
        'company_id_3': fields.many2one('res.company', 'Company'),
        'comp3_title': fields.many2one('res.partner.title', 'Title'),
        'company_act_3': fields.text('Company Activity Domain'),
        'comp3_fiscal_id': fields.char('Fiscal ID'),
        'comp3_registry': fields.char('Registration Number'),
        'comp3_street': fields.char('Street'),
        'comp3_street2': fields.char('Street2'),
        'comp3_country_id': fields.many2one('res.country', 'Country', ondelete='restrict'),
        'comp3_state_id': fields.many2one("res.country.state", 'State', ondelete='restrict'),
        'comp3_zip': fields.char('ZIP', size=24, change_default=True),
        'comp3_city': fields.char('CITY'),
        'company_id_4': fields.many2one('res.company', 'Company'),
        'comp4_title': fields.many2one('res.partner.title', 'Title'),
        'company_act_4': fields.text('Company Activity Domain'),
        'comp4_fiscal_id': fields.char('Fiscal ID'),
        'comp4_registry': fields.char('Registration Number'),
        'comp4_street': fields.char('Street'),
        'comp4_street2': fields.char('Street2'),
        'comp4_country_id': fields.many2one('res.country', 'Country', ondelete='restrict'),
        'comp4_state_id': fields.many2one("res.country.state", 'State', ondelete='restrict'),
        'comp4_zip': fields.char('ZIP', size=24, change_default=True),
        'comp4_city': fields.char('CITY'),

        'partner_leads' : fields.one2many('crm.lead', 'dealer', string="Leads", readonly="True", ),
        'partner_campaigns' : fields.one2many('crm.tracking.campaign', 'partner_id', string="Campaigns", readonly="True"),
        'partner_sale_info' : fields.one2many('sale.order', 'partner_id', string="Sales Info", readonly="True"),
        'customer_acc_inv' : fields.one2many('account.invoice', 'dealer_id', string="Customer Invoice Info", readonly="True", domain=[('type', '=', 'out_invoice')]),
#        'supplier_acc_inv' : fields.one2many('account.invoice', 'partner_id', string="Supplier Invoice Info", readonly="True", domain=[('type', '=', 'in_invoice')]),
        'customer_payment' : fields.one2many('account.voucher', 'dealer_id', string="Customer Payment Info", readonly="True", domain=[('type', '=', 'receipt')]),
#        'supplier_payment' : fields.one2many('account.voucher', 'partner_id', string="Supplier Payment Info", readonly="True", domain=[('type', '=', 'payment')]),
        'future_meetings' : fields.one2many('calendar.event', 'partner_id', string="Future Meetings", readonly="True"),
        'past_meetings' : fields.one2many('calendar.event', 'partner_id', string="Past Events", readonly="True"),
        'appointment_ids' : fields.one2many('calendar.event', 'dealer_id', string="Appointments", readonly="True"),
        'trip_meetings' : fields.one2many('calendar.event', 'partner_id', string="Trips", readonly="True"),
        'gift_ids': fields.one2many('gift.line', 'dealer_id', 'Gifts', copy=False),
        'appointment_type': fields.selection(
                [('owner', 'Owner')],
                'Appointment Type', copy=False),


    }

    @api.multi
    def onchange_state(self, state_id):
        if state_id:
            state = self.env['res.country.state'].browse(state_id)
            return {'value': {'country_id': state.country_id.id}}
        return {}

AVAILABLE_PRIORITIES = [
    ('0', 'Very Low'),
    ('1', 'Low'),
    ('2', 'Normal'),
    ('3', 'High'),
    ('4', 'Very High'),
]


class crm_lead(format_address, osv.osv):
    """ CRM Lead Case """
    _inherit = "crm.lead"
    
    _columns = {
            'priority': fields.selection(AVAILABLE_PRIORITIES, 'Priority', select=True),
            'first_name': fields.char('Name', select=1, readonly=False),
            'last_name': fields.char('Name', select=1, readonly=False),
            'partner_title': fields.many2one('res.partner.title', 'Title'),
            'company_owner': fields.boolean('Company Owner?'),
            'company_name': fields.many2one('res.company', 'Company'),
            'home_phone' : fields.char('Home Phone (2)'),
            'mobile_phone' : fields.char('Mobile Phone (2)'),
            'work_phone' : fields.char('Work Phone'),
            'email_2' : fields.char('Email (2)'),
            'place_emp': fields.char('Place of Employment'),
            'job_title': fields.char('Job Title'),
            'marital_status': fields.selection(
                [('single', 'Single'), ('engaged', 'Engaged'), ('married', 'Married'), ('partners', 'Partners'), ('couple', 'Couple'), ('widower', 'Widower'), ('divorced', 'Divorced')],
                string='Marital Status', copy=False),
            'personal_no' : fields.char('Personal No'),
            'street_2': fields.char('Street'),
            'street2_2': fields.char('Street2'),
            'city_2': fields.char('City'),
            'country_id_2': fields.many2one('res.country', 'Country', ondelete='restrict'),
            'state_id_2': fields.many2one("res.country.state", 'State', ondelete='restrict'),
            'zip_2': fields.char('Zip', size=24, change_default=True),
            'image': fields.binary("Image",
                help="This field holds the image used as avatar for this contact, limited to 1024x1024px"),
            'source_id' : fields.many2one('crm.tracking.source', string="Lead Source"),
            'dealer_id' : fields.many2one('res.dealer', string="Dealer"),
            'lead_type': fields.selection(
                [('pl', 'Personal'), ('gl', 'Green Lights'), ('is', 'Instant')],
                'Lead type', copy=False),
            'own_rent': fields.selection(
                    [('own', 'Own'), ('rent', 'Rent')],
                    string='Own or Rent?', copy=False),
            'more_comp' : fields.boolean('More Companies?'),
                    
            'partner_first_name': fields.char('First Name'),
            'partner_last_name': fields.char('Last Name'),
            'partner_email': fields.char('Email'),
            'partner_function': fields.char('Job Title'),
            'partner_place_emp': fields.char('Place of Employment'),
            'partner_cell_phone': fields.char('Cell Phone'),
            'partner_home_phone': fields.char('Home Phone'),
            'partner_work_phone': fields.char('Work Phone'),
            'allergies_yes': fields.boolean('Yes'),
            'allergies_no': fields.boolean('No'),
            'pets_yes': fields.boolean('Yes'),
            'pets_no': fields.boolean('No'),

            'children' : fields.boolean('Children'),
            'child_1': fields.char('Child 1'),
            'child_2': fields.char('Child 2'),
            'appointment_type': fields.selection(
                    [('owner', 'Owner')],
                    'Appointment Type', copy=False),
            'referred_by': fields.many2one('res.partner', 'Referred By'),
            'lead_type': fields.selection(
                    [('pl', 'Personal'), ('gl', 'Green Lights'), ('is', 'Instant')],
                    'Lead type', copy=False),
            'dealer': fields.many2one('res.dealer', 'Dealer'),
            'sponsor': fields.many2one('res.partner', 'Sponsor'),
            'event': fields.char('Event'),
            'comment_other': fields.text('Notes'),
            'comment': fields.text('Notes'),                    
            
            'company_id_1': fields.many2one('res.company', 'Company'),
            'comp1_title': fields.many2one('res.partner.title', 'Title'),
            'company_act_1': fields.text('Company Activity Domain'),
            'comp1_fiscal_id': fields.char('Fiscal ID'),
            'comp1_registry': fields.char('Registration Number'),
            'comp1_street': fields.char('Street'),
            'comp1_street2': fields.char('Street2'),
            'comp1_country_id': fields.many2one('res.country', 'Country', ondelete='restrict'),
            'comp1_state_id': fields.many2one("res.country.state", 'State', ondelete='restrict'),
            'comp1_zip': fields.char('ZIP', size=24, change_default=True),
            'comp1_city': fields.char('CITY'),
            
            'company_id_2': fields.many2one('res.company', 'Company'),
            'comp2_title': fields.many2one('res.partner.title', 'Title'),
            'company_act_2': fields.text('Company Activity Domain'),
            'comp2_fiscal_id': fields.char('Fiscal ID'),
            'comp2_registry': fields.char('Registration Number'),
            'comp2_street': fields.char('Street'),
            'comp2_street2': fields.char('Street2'),
            'comp2_country_id': fields.many2one('res.country', 'Country', ondelete='restrict'),
            'comp2_state_id': fields.many2one("res.country.state", 'State', ondelete='restrict'),
            'comp2_zip': fields.char('ZIP', size=24, change_default=True),
            'comp2_city': fields.char('CITY'),

            'company_id_3': fields.many2one('res.company', 'Company'),
            'comp3_title': fields.many2one('res.partner.title', 'Title'),
            'company_act_3': fields.text('Company Activity Domain'),
            'comp3_fiscal_id': fields.char('Fiscal ID'),
            'comp3_registry': fields.char('Registration Number'),
            'comp3_street': fields.char('Street'),
            'comp3_street2': fields.char('Street2'),
            'comp3_country_id': fields.many2one('res.country', 'Country', ondelete='restrict'),
            'comp3_state_id': fields.many2one("res.country.state", 'State', ondelete='restrict'),
            'comp3_zip': fields.char('ZIP', size=24, change_default=True),
            'comp3_city': fields.char('CITY'),
            
            'company_id_4': fields.many2one('res.company', 'Company'),
            'comp4_title': fields.many2one('res.partner.title', 'Title'),
            'company_act_4': fields.text('Company Activity Domain'),
            'comp4_fiscal_id': fields.char('Fiscal ID'),
            'comp4_registry': fields.char('Registration Number'),
            'comp4_street': fields.char('Street'),
            'comp4_street2': fields.char('Street2'),
            'comp4_country_id': fields.many2one('res.country', 'Country', ondelete='restrict'),
            'comp4_state_id': fields.many2one("res.country.state", 'State', ondelete='restrict'),
            'comp4_zip': fields.char('ZIP', size=24, change_default=True),
            'comp4_city': fields.char('CITY'),
            
            'address_same_yes': fields.boolean('Yes'),
            'address_same_no': fields.boolean('No'),
            'street_2': fields.char('Street'),
            'street2_2': fields.char('Street2'),
            'city_2': fields.char('City'),
            'country_id_2': fields.many2one('res.country', 'Country', ondelete='restrict'),
            'state_id_2': fields.many2one("res.country.state", 'State', ondelete='restrict'),
            'zip_2': fields.char('Zip', size=24, change_default=True),
            'result_id' : fields.many2one('appointment.result', 'Result'),
            
            'lead_id' : fields.many2one('crm.lead', 'Leads'),
            
            'appt_type' : fields.many2one('appt.type', 'Appt Type'),
            'date_set' : fields.date('Date Set'),
            'date_sold' : fields.date('Date Sold'),
            'serial_no' : fields.many2one('stock.production.lot', 'Serial #'),
            'dealer_id': fields.many2one('res.dealer', 'Dealer'),
            'dealer_position' : fields.many2one('dealer.position', 'Position'),
            'advance_date' : fields.date('Advance Date'),
            'sale_amt' : fields.char('Sale'),
            'tax_rate' : fields.char('Tax Rate'),
            'total_tax' : fields.char('Total Tax'),
            'total_sale' : fields.char('Total Sale'),
            'sponsor_id_2': fields.many2one('res.partner', 'Sponsor'),
            'lead_dealer_id': fields.many2one('res.dealer', 'Lead Dealer'),
            'assistant_id' : fields.many2one('res.users', 'Assistant'),
            'ride_along_id' : fields.many2one('res.users', 'Ride-Along'),
            'set_by' : fields.many2one('res.users', 'Set By'),
            'prob_with_sale' : fields.many2one('sale.problem', 'Problem With Sale'),
            'sale_comment' : fields.text('Sale Comments'),
            
            'pay_type': fields.many2one('account.payment.term', 'Payment Type'),
            'option' : fields.char('Options'),
            'down_payment' : fields.char('Down Payment'),
            'down_type': fields.many2one('payment.type', 'Down Type'),
            'amount_financed' : fields.char('Amount Financed'),
            'filling_fee' : fields.char('Filling Fee'),
            'reserve_amt' : fields.char('Reserve Amount'),
            'discount_amt' : fields.char('Discount Amount'),
            'sac_disc' : fields.char('S.A.C Discount'),
            'balance_due' : fields.char('Balance Due'),
            'net_sale' : fields.char('Net Sale'),
            'comment_warranty' : fields.text('Notes'),
            'comment_service' : fields.text('Notes'),
            
            
            'leads_ids' : fields.one2many('crm.lead', 'lead_id', string="Leads", readonly="True", ),
            'appointment_ids' : fields.one2many('calendar.event', 'lead_id', string="Appointments", readonly="True"),
            'campaigns_ids' : fields.one2many('crm.tracking.campaign', 'lead_id', string="Campaigns", readonly="True"),
            'call_history_ids' : fields.one2many('crm.phonecall', 'opportunity_id', string="Logged Calls", readonly="True"),
            'gift_ids': fields.one2many('gift.line', 'lead_id', 'Gifts', copy=False),
            'customer_acc_inv' : fields.one2many('account.invoice', 'lead_id', string="Customer Invoice Info", readonly="True", domain=[('type', '=', 'out_invoice')]),
            'customer_payment' : fields.one2many('account.voucher', 'lead_id', string="Customer Payment Info", readonly="True", domain=[('type', '=', 'receipt')]),
            'prod_warr_ids': fields.one2many('product.warranty', 'lead_warr_id', 'Warranty Revision', copy=False),
			'prod_service_ids' : fields.one2many('product.warranty', 'lead_service_id', 'Service Revision', copy=False),
    }
    
    _defaults = {
        'name': lambda self,cr,uid,context={}: self.pool.get('ir.sequence').get(cr, uid, 'crm.demo'),
    }
    
    def on_change_partner_id(self, cr, uid, ids, partner_id, context=None):
        values = {}
        if partner_id:
            partner = self.pool.get('res.partner').browse(cr, uid, partner_id, context=context)
            values = {
                'street': partner.street,
                'street2': partner.street2,
                'city': partner.city,
                'state_id': partner.state_id and partner.state_id.id or False,
                'country_id': partner.country_id and partner.country_id.id or False,
                'zip': partner.zip,
            }
        return {'value': values}
    
    def onchange_add(self, cr, uid, ids, address_same_yes, context=None):
        result = {}
        partner_obj = self.browse(cr, uid, ids)
        if address_same_yes is True:
            result['value'] = {'street_2': partner_obj.street, 'street2_2': partner_obj.street2, 'city_2' : partner_obj.city, 'country_id_2' : partner_obj.country_id, 'state_id_2' : partner_obj.state_id, 'zip_2' : partner_obj.zip}
        return result

    def onchange_comp1(self, cr, uid, ids, company, context=None):
        result = {}
        company_obj = self.pool.get('res.company').browse(cr, uid, company)
        result['value'] = {'comp1_street': company_obj.street, 'comp1_street2': company_obj.street2,  'comp1_country_id': company_obj.country_id, 'comp1_state_id': company_obj.state_id, 'comp1_zip': company_obj.zip, 'comp1_city' : company_obj.city, 'comp1_vat' : company_obj.vat, 'comp1_registry' : company_obj.company_registry, 'company_id_1' : company}
        return result

    def onchange_comp2(self, cr, uid, ids, company, context=None):
        result = {}
        company_obj = self.pool.get('res.company').browse(cr, uid, company)
        result['value'] = {'comp2_street': company_obj.street, 'comp2_street2': company_obj.street2,  'comp2_country_id': company_obj.country_id, 'comp2_state_id': company_obj.state_id, 'comp2_zip': company_obj.zip, 'comp2_city' : company_obj.city, 'comp2_vat' : company_obj.vat, 'comp2_registry' : company_obj.company_registry}
        return result
    
    
    def action_schedule_meeting(self, cr, uid, ids, context=None):
        return super(crm_lead, self).action_schedule_meeting(cr, uid, ids, context=context)
    
    
#    def create(self, cr, uid, vals, context=None):
#        if vals.get('name', '/') == '/':
#            vals['name'] = self.pool.get('ir.sequence').get(cr, uid, 'crm.demo') or '/'
        
#        return super(crm_lead, self).create(cr, uid, vals, context=context)
    

class crm_tracking_campaign(osv.Model):
    # OLD crm.case.resource.type
    _inherit = "crm.tracking.campaign"
    
    _columns = {
            'partner_id' : fields.many2one('res.partner', 'Partner'),
            'lead_id' : fields.many2one('crm.lead', 'Leads'),
    }

class product_product(osv.osv):
    _inherit = "product.product"
    
    _columns = {
            'prod_gift' : fields.boolean('Gift'),
    }

class calendar_event(osv.Model):
    """ Model for Calendar Event """
    _inherit = 'calendar.event'
    _columns = {
            'image': fields.binary("Image",
            help="This field holds the image used as avatar for this contact, limited to 1024x1024px"),
            'first_name': fields.char('Name', required=True, select=1, readonly=False),
            'last_name': fields.char('Name', required=True, select=1, readonly=False),
            'street': fields.char('Street'),
            'street2': fields.char('Street2'),
            'city': fields.char('City'),
            'country_id': fields.many2one('res.country', 'Country', ondelete='restrict'),
            'state_id': fields.many2one("res.country.state", 'State', ondelete='restrict'),
            'zip': fields.char('Zip', size=24, change_default=True),
            'meeting_type': fields.selection([('normal', 'Normal'), ('trips', 'Trips')],string='Meeting Type'),
            
            'user_id': fields.many2one('res.users', 'Responsible', states={'done': [('readonly', True)]}),
            'partner_id' : fields.many2one('res.partner', 'Partner'),
            'dealer_id' : fields.many2one('res.dealer', 'Dealer Assigned'),
            'supervisor_id' : fields.many2one('res.users', 'Supervisor'),
            'assistant_id' : fields.many2one('res.users', 'Assistant'),
            'operator_id' : fields.many2one('res.users', 'Operator'),
            'ride_along_id_1' : fields.many2one('res.users', 'Ride-Along'),
            'phone' : fields.char('Phone Number'),
            'name': fields.char('Subject', readonly=True, required=False),
            
            'result_id' : fields.many2one('appointment.result', 'Result'),
            'sale_amount' : fields.char('Amount of Sale'),
            'tracking_no' : fields.char('Tracking Number'),
            'leads_count' : fields.char('Number of Leads'),
            'assistant_id_2' : fields.many2one('res.users', 'Assistant'),
            'deliver_id' : fields.many2one('item.deliver', 'Delivered'),
            'allday': fields.boolean('All Day', states={'done': [('readonly', True)]}),
            'deposit_status' : fields.many2one('item.deposit', 'Deposit Collected'),
            'Applicant_yes': fields.boolean('Co-Applicant'),
            'Applicant_no': fields.boolean('Co-Applicant'),
            'house_id' : fields.many2one('open.house', 'Open-House'),
            'ride_along_id_2' : fields.many2one('res.users', 'Ride-Along'),
            'prod_lot_id' : fields.many2one('stock.production.lot', 'Serial Number'),
            'deposit_amount' : fields.char('Deposit Amount'),
            'same_yes': fields.boolean('Same as Second'),
            'same_no': fields.boolean('Same as Second'),
            'description_2': fields.text('Comments'),
            'lead_type': fields.selection(
                    [('pl', 'Personal'), ('gl', 'Green Lights'), ('is', 'Instant')],
                    'Type', copy=False),
            'stage_id': fields.selection([('new', 'New'), ('appoint_set', 'Appointment Set'), ('appoint_cancel', 'Appointment Cancelled'), ('demo_in_prog', 'Demo in Progress')], 'Stage', track_visibility='onchange', select=True),
            'source_id': fields.many2one('crm.tracking.source', 'Source', help="This is the source of the link Ex: Search Engine, another domain, or name of email list"),
            
            'lead_id' : fields.many2one('crm.lead', 'Leads'),
            
    }
    
    @api.multi
    def onchange_state(self, state_id):
        if state_id:
            state = self.env['res.country.state'].browse(state_id)
            return {'value': {'country_id': state.country_id.id}}
        return {}
    
    _defaults = {
        'name': lambda self,cr,uid,context={}: self.pool.get('ir.sequence').get(cr, uid, 'calendar.event'),
        'stage_id' : 'new',
    }
    
    
class sale_order(osv.osv):
    _inherit = "sale.order"
    _columns = {
            'dealer_id' : fields.many2one('res.dealer', 'Dealer'),
    }
    
    
class dealer_position(osv.Model):
    _name = 'dealer.position'
    
    _columns = {
            'name' : fields.char('Name'),
    }
class crm_case_section(osv.Model):
    _inherit = 'crm.case.section'

    def _get_opportunities_data(self, cr, uid, ids, field_name, arg, context=None):
        return super(crm_case_section, self)._get_opportunities_data(cr, uid, ids, field_name, arg, context=context)

    _columns = {
        'monthly_planned_revenue': fields.function(_get_opportunities_data,
            type="char", readonly=True, multi='_get_opportunities_data',
            string='Planned Revenue per Month'),
    }

class crm_phonecall(osv.osv):
    """ Model for CRM phonecalls """
    _inherit = "crm.phonecall"
    
    def action_button_convert2opportunity(self, cr, uid, ids, context=None):
        """
        Convert a phonecall into an opp and then redirect to the opp view.

        :param list ids: list of calls ids to convert (typically contains a single id)
        :return dict: containing view information
        """
        return super(crm_phonecall, self).action_button_convert2opportunity(cr, uid, ids, context=context)
    
    def action_make_meeting(self, cr, uid, ids, context=None):
        """
        Open meeting's calendar view to schedule a meeting on current phonecall.
        :return dict: dictionary value for created meeting view
        """
        return super(crm_phonecall, self).action_make_meeting(cr, uid, ids, context=context)
    
    _columns = {
            'dealer_id' : fields.many2one('res.dealer', 'Dealer'),
            'appoint_date' : fields.date('Appointment Date'),
            'appoint_time' : fields.char('Time'),
    }
class crm_lead2opportunity_partner(osv.osv_memory):
    _inherit = 'crm.lead2opportunity.partner'
    _columns = {
        'name': fields.selection([
                ('convert', 'Convert to demo'),
                ('merge', 'Merge with existing demo')
            ], 'Conversion Action', required=True),
            
    }
    
class account_invoice(osv.osv):
    _inherit = "account.invoice"

    _columns = {
        'dealer_id' : fields.many2one('res.dealer', 'Dealer'),
        'lead_id' : fields.many2one('crm.lead', 'Leads'),
    }

class account_voucher(osv.osv):
    _inherit = 'account.voucher'
    
    _columns = {
        'dealer_id' : fields.many2one('res.dealer', 'Dealer'),
        'lead_id' : fields.many2one('crm.lead', 'Leads'),
    }
    
class item_deliver(osv.Model):
    _name = 'item.deliver'
    
    _columns = {
            'name' : fields.char('Name'),
    }
    
class item_deposit(osv.Model):
    _name = 'item.deposit'
    
    _columns = {
            'name' : fields.char('Name'),
    }

class open_house(osv.Model):
    _name = 'open.house'
    
    _columns = {
            'name' : fields.char('Name'),
    }

class appointment_result(osv.Model):
    _name = 'appointment.result'
    
    _columns = {
            'name' : fields.char('Name'),
    }

class gift_line(osv.Model):
    _name = 'gift.line'
    
    _columns = {
            'partner_id' : fields.many2one('res.partner', 'Partner'),
            'grant_id' : fields.many2one('product.grant', 'HOW GRANTED'),
            'product_id' : fields.many2one('product.product', 'GIFT'),
            'letter_print_date' : fields.date('LETTER PRINTED'),
            'receipt_print_date' : fields.date('RECEIPT PRINTED'),
            'pickup_by' : fields.many2one('res.dealer', 'PICKED UP BY'),
            'receive_date' : fields.date('RECEIVED'),
            'comment' : fields.char('COMMENT'),
            'lead_id' : fields.many2one('crm.lead', 'Leads'),
            'dealer_id' : fields.many2one('res.dealer', 'Dealer'),
    }

class product_grant(osv.Model):
    _name = 'product.grant'
    
    _columns = {
            'name' : fields.char('Name'),
    }

class sale_problem(osv.Model):
    _name = 'sale.problem'
    
    _columns = {
            'name' : fields.char('Name'),
    }

class appt_type(osv.Model):
    _name = 'appt.type'
    
    _columns = {
            'name' : fields.char('Name'),
    }

class payment_type(osv.Model):
    _name = 'payment.type'
    
    _columns = {
            'name' : fields.char('Name'),
    }


class product_warranty(osv.Model):
    _name = 'product.warranty'
    
    _columns = {
            'date' : fields.date('Date'),
            'number' : fields.char('Number'),
            'ref' : fields.char('Ref #'),
            'revision_desc' : fields.char('Revision Description'),
            'total' : fields.integer('Total'),
            'status' : fields.many2one('service.status', 'Status'),
            'partner_warr_id' : fields.many2one('res.partner', 'Partner'),
            'partner_service_id' : fields.many2one('res.partner', 'Partner'),
            
            'lead_warr_id' : fields.many2one('crm.lead', 'Lead'),
            'lead_service_id' : fields.many2one('crm.lead', 'Lead'),
    }
    
    
class service_status(osv.Model):
    _name = 'service.status'
    
    _columns = {
            'name' : fields.char('Name'),
    }
